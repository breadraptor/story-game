<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_spr_down</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>player_spr</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player initialization
interacting = false;
choosing = false;
pushing = false;
pushed_obj = noone;
depth = 2;
hp = 10;
max_hp = 10;

instance_create(-100, 200, health_obj);
//game_save("Start.dat");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(player_heart);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement and dialogue choice
if (interacting){
    if (arrow_obj.visible){
        if (arrow_obj.y == arrow_obj.top_choice &amp;&amp; keyboard_check(ord('S'))){
            // move down
            trace("move down")
            arrow_obj.y = arrow_obj.bottom_choice;
        }
        else if (arrow_obj.y == arrow_obj.bottom_choice &amp;&amp; keyboard_check(ord('W'))){
            //move up
            trace("move up")
            arrow_obj.y = arrow_obj.top_choice;
        }
    }
}

var hspd = 0;
var vspd = 0;

if (keyboard_check(ord('W'))){
    vspd  -= 5;
    if (pushing){
        pushed_obj.y = y - 10; //offsetting the cart in this direction
        pushed_obj.x = x;
    }
}
if (keyboard_check(ord('S'))){
    vspd  += 5;
    if (pushing){
        pushed_obj.y = y + 10;
        pushed_obj.x = x;
    }
}
if (keyboard_check(ord('A'))){
    hspd  -= 5;
    if (pushing){
        pushed_obj.x = x - 18;
        pushed_obj.y = y;
    }
}
if (keyboard_check(ord('D'))){
    hspd  += 5;
    if (pushing){
        pushed_obj.x = x + 18;
        pushed_obj.y = y;
    }
}
if (!interacting){
    // ******************* X MOVEMENT ********************
    if (place_meeting(x+hspd, y, collision_obj) &amp;&amp; !pushing){ //normal collision x
        //trace("collision x");
        while(!place_meeting(x + sign(hspd), y, collision_obj))
            x += sign(hspd);
    }
    else if (pushing){
        if (place_meeting(pushed_obj.x+hspd, pushed_obj.y, collision_obj)){ //pushing collision x
            while(!place_meeting(pushed_obj.x+sign(hspd), pushed_obj.y, collision_obj)){
                x += sign(hspd);
                pushed_obj.x += sign(hspd);            
            }
        }
        else { //pushing no collision x
            pushed_obj.x += hspd;
            x += hspd;
        }
    }

    else {
        x += hspd; //just moving x
    }
    
    // ******************* Y MOVEMENT ********************
    if (place_meeting(x, y+vspd, collision_obj) &amp;&amp; !pushing){ //normal collision y
        //trace("normal collision y");
        while(!place_meeting(x, y + sign(vspd), collision_obj))
            y += sign(vspd);
    }
    else if (pushing){ 
        if (place_meeting(pushed_obj.x, pushed_obj.y+vspd, collision_obj)){ //pushing collision y
            //trace("pushing collision y", pushed_obj.y);
            while(!place_meeting(pushed_obj.x, pushed_obj.y + sign(vspd), collision_obj)){
                y += sign(vspd);
                pushed_obj.y += sign(vspd);
            }
        }
        else { //pushing no collision y
            pushed_obj.y += vspd;
            y += vspd;
        }
    } 
    else {
        y += vspd; //just moving y
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// animation
//trace(hspd, vspd, x, xprevious)
if (!interacting){
    if (hspd&gt;0){
        if (sprite_index != player_spr_right){
           sprite_index = player_spr_right
            image_speed = 0.15     
        }
        if (pushing){
            pushed_obj.image_index = 1;
        }
    }
    else if (hspd&lt;0){
        if (sprite_index != player_spr_left){
            sprite_index = player_spr_left
            image_speed = 0.15 
        }
        if (pushing){
            pushed_obj.image_index = 0;
        }
    }
    else if (vspd &gt; 0){
        if (sprite_index != player_spr_down){
            sprite_index = player_spr_down
            image_speed = 0.15
        }
        if (pushing){
            pushed_obj.image_index = 3;
            pushed_obj.depth = 1;
        }
    }
    else if (vspd &lt; 0){
        if (sprite_index != player_spr_up){
            sprite_index = player_spr_up
            image_speed = 0.15
        }
        if (pushing){
            pushed_obj.image_index = 2;
            pushed_obj.depth = 3;
        }
    }
    else {
        image_speed = 0;
        image_index = 0;
        if (pushing){
            pushed_obj.image_speed = 0;
        }
    }
}
else {
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//entrance = 0;
x = 128;
y = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///kissing
if (!instance_exists(player_heart)){
    instance_create(x, y-45, player_heart);
    alarm[0] = room_speed;
    if (place_meeting(x, y, kissable_obj) &amp;&amp; !interacting &amp;&amp; !pushing){
        if (instance_place(x, y, kissable_obj).kissable){
            trace("Success!");
        }
        else {
            trace("Fail!");
            //todo remove below:
            //var k_o = instance_place(x, y, kissable_obj);
            //k_o.kissable = true;
            player_obj.hp -= 5;
            if (player_obj.hp == 0){
                trace("DIED");
                //game_load("Start.dat");
            }
        }
    }
    else {
        trace("Kissed nothing!");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// interaction
/*if (place_meeting(x, y-2, collision_obj)){
    trace("collision:", instance_place(x, y-2, collision_obj));
} */
if (place_meeting(x, y, exit_obj) &amp;&amp; !pushing){ //this means you can't push carts between rooms
    move_room();
}
else if (place_meeting(x, y, interaction_obj) &amp;&amp; !interacting){
    trace("oh words?", instance_place(x, y, interaction_obj))
    text_box_obj.visible = true;
    interacting = true;
    create_text(instance_place(x, y, interaction_obj), -1);
}
else if (place_meeting(x, y, cart_obj) &amp;&amp; !interacting &amp;&amp; !pushing){
    // start pushing
    trace("commence pushing");
    pushing = true;
    pushed_obj = instance_place(x, y, cart_obj); // todo doesn't account for other pushable things
    instance_deactivate_object(pushed_obj.my_collision);
    // make the cart face the right way
    if (sprite_index == player_spr_up){
        pushed_obj.image_index = 2;
        pushed_obj.x = x;
    }
    else if (sprite_index == player_spr_down){
        pushed_obj.image_index = 3;
        pushed_obj.x = x;
    }
    else if (sprite_index == player_spr_left){
        pushed_obj.image_index = 0;
        pushed_obj.y = y;
    }
    else if (sprite_index == player_spr_right){
        pushed_obj.image_index = 1;
        pushed_obj.y = y;
    }
}
else if (pushing){
    //stop pushing
    trace("stop pushing");
    instance_activate_object(pushed_obj.my_collision);
    // I need to move the replaced collision box a little over so the player doesnt get stuck
    if (sprite_index == player_spr_up){
        pushed_obj.my_collision.x = pushed_obj.x;
        pushed_obj.my_collision.y = pushed_obj.y-5;
    }
    else if (sprite_index == player_spr_down){
        pushed_obj.my_collision.x = pushed_obj.x;
        pushed_obj.my_collision.y = pushed_obj.y+5;
    }
    else if (sprite_index == player_spr_left){
        pushed_obj.my_collision.x = pushed_obj.x-5;
        pushed_obj.my_collision.y = pushed_obj.y;
    }
    else if (sprite_index == player_spr_right){
        pushed_obj.my_collision.x = pushed_obj.x+5;
        pushed_obj.my_collision.y = pushed_obj.y;
    }

    pushing = false;
    pushed_obj = noone;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
